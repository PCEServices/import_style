# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StyleImportDialog
                                 A QGIS plugin
 Importer style
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-05-17
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Romain Lagrange
        email                : romain.lagrange@pceservices.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from glob import glob

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import *
from qgis.core import QgsProject
from qgis.utils import iface
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QPushButton, QLabel
import sys
from PyQt5.QtWidgets import QAction
from PyQt5.QtGui import QIcon
import os
from PyQt5.QtCore import *
import qgis
from qgis.core import *
from PyQt5 import *
import ctypes
from qgis.PyQt.QtWidgets import QProgressBar
from qgis.PyQt.QtCore import *
from qgis.core import QgsApplication

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'import_style_dialog_base.ui'))

def ouvrirdossier(self):
            path = "C:/"
            path = os.path.realpath(path)
            os.startfile(path)
            
comboBox = None
class StyleImportDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(StyleImportDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        def resolve(name, basepath=None):
            if not basepath:
                basepath = os.path.dirname(os.path.realpath(__file__))
            return os.path.join(basepath, name)
        folder = resolve('styles')
        sub_folders = [name for name in os.listdir(folder) if os.path.isdir(os.path.join(folder, name))]
        for x in sub_folders:
            self.comboBox.addItem(x)
        
    def openfile(self):
        def resolve(name, basepath=None):
            if not basepath:
                basepath = os.path.dirname(os.path.realpath(__file__))
            return os.path.join(basepath, name)
        path = resolve('styles')
        os.startfile(path)

    def importerStyle(self):
        cable = 'CABLE_OPTIQUE'
        boite = 'BOITE_OPTIQUE'
        site = 'SITE'
        point = 'POINT_TECHNIQUE'
        adduction = 'ADDUCTION'
        zapbo = 'ZAPBO'
        zacable = 'ZACABLE'
        zasro = 'ZASRO'
        zanro = 'ZANRO'
        dbl = 'DBL'
        imb = 'imb'
        effacement = 'effacement'
        arciti = 'ARCITI'
        infra = 'INFRA'
        chambre = 'CHAMBRE'
        supportpiquetage = 'SUPPORT'
        support = '_SUPPORT'
        ft_arciti = 'ft_arciti'
        ft_chambre = 'ft_chambre'
        ft_appui = 'ft_appui'
        root = QgsProject.instance().layerTreeRoot()
        allLayers = root.layerOrder()
        treeview = iface.layerTreeView()
        model = treeview.layerTreeModel()
        def resolve(name, basepath=None):
            if not basepath:
                basepath = os.path.dirname(os.path.realpath(__file__))
            return os.path.join(basepath, name)

#Si la couche existe alors appliquer le style

        def setStyle(couche):
            if couche in layer.name() or couche.lower() in layer.name():
                dirstyle = resolve('styles')
                dirstyle = dirstyle.replace("\\","/")
                style_path = dirstyle +'/' +self.comboBox.currentText()+'/'+couche + '.qml'
                layer.loadNamedStyle(style_path)
                layer.triggerRepaint()


        for layer in QgsProject.instance().mapLayers().values():
            setStyle(cable)
            setStyle(boite)
            setStyle(site)
            setStyle(point)
            setStyle(adduction)
            setStyle(zapbo)
            setStyle(zacable)
            setStyle(zasro)
            setStyle(zanro)
            setStyle(dbl)
            setStyle(imb)
            setStyle(effacement)
            setStyle(arciti)
            setStyle(infra)
            setStyle(chambre)
            setStyle(supportpiquetage)
            setStyle(support)
            setStyle(ft_arciti)
            setStyle(ft_appui)
            setStyle(ft_chambre)